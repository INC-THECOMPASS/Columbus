{"version":3,"file":"formats.min.js","sources":["../src/config/constants.ts","../src/services/validator.ts","../src/services/getter.ts","../src/services/lifecycleManager.ts","../src/utils/formats/commaizeNumber.ts"],"sourcesContent":["const PROMPT_MSG = {\n  empty_text: '빈 값 입니다.',\n  empty_elem: '선택된 요소가 없습니다.',\n  wrong_attr: '잘못된 속성 값을 입력하셨습니다.',\n};\n\nexport default PROMPT_MSG;\n","import PROMPT_MSG from '../config/constants';\n\nconst validateElements = (\n  elements: NodeListOf<Element> | null,\n): Element | NodeListOf<Element> => {\n  if (!elements) {\n    throw new Error(PROMPT_MSG.empty_elem);\n  }\n\n  return elements;\n};\n\nconst validateAttr = (attr: string, value: string): boolean => {\n  const isValidAttr = attr === value;\n\n  if (!isValidAttr) {\n    throw new Error(PROMPT_MSG.wrong_attr);\n  }\n\n  return isValidAttr;\n};\n\nconst validateAttrInList = (attr: string, validAttrs: string[]): boolean => {\n  const isValidAttr = validAttrs.includes(attr);\n\n  if (isValidAttr) {\n    throw new Error(PROMPT_MSG.wrong_attr);\n  }\n\n  return validAttrs.includes(attr);\n};\n\nconst validateText = (text: string | null): string => {\n  if (!text) {\n    throw new Error(PROMPT_MSG.empty_text);\n  }\n\n  return text;\n};\n\nexport { validateElements, validateAttr, validateAttrInList, validateText };\n","import { validateElements, validateText } from './validator';\n\nconst getElements = (selector: string): NodeListOf<Element> => {\n  const elements = document.querySelectorAll(selector);\n  validateElements(elements);\n\n  return elements;\n};\n\nconst getElementAttr = (element: Element, customAttr: string): string => {\n  const attr = element.getAttribute(validateText(customAttr));\n  return validateText(attr);\n};\n\nexport { getElements, getElementAttr };\n","type LifecycleEvent = 'DOMContentLoaded' | 'load' | 'beforeunload' | 'unload';\ntype lifecycleHandler = () => void;\n\nconst lifecycleEvents: { [key in LifecycleEvent]?: Array<() => void> } = {\n  DOMContentLoaded: [],\n  load: [],\n  beforeunload: [],\n  unload: [],\n};\n\n// 이벤트 발생여부 파악\nconst eventFired: { [key in LifecycleEvent]?: boolean } = {\n  DOMContentLoaded: false,\n  load: false,\n  beforeunload: false,\n  unload: false,\n};\n\n// 이벤트 발생여부를 파악해, 즉시 실행에 대한 여부를 결정\nconst onEvent = (event: LifecycleEvent, callback: lifecycleHandler) => {\n  if (eventFired[event]) {\n    callback();\n    return;\n  }\n\n  lifecycleEvents[event]?.push(callback);\n};\n\n// 각 이벤트 발생 시 콜백 실행\ndocument.addEventListener('DOMContentLoaded', () => {\n  eventFired.DOMContentLoaded = true;\n  lifecycleEvents.DOMContentLoaded?.forEach((callback) => callback());\n});\n\nwindow.addEventListener('load', () => {\n  eventFired.load = true;\n  lifecycleEvents.load?.forEach((callback) => callback());\n});\n\nwindow.addEventListener('beforeunload', () => {\n  eventFired.beforeunload = true;\n  lifecycleEvents.beforeunload?.forEach((callback) => callback());\n});\n\nwindow.addEventListener('unload', () => {\n  eventFired.unload = true;\n  lifecycleEvents.unload?.forEach((callback) => callback());\n});\n\nexport { LifecycleEvent, onEvent };\n","import { getElementAttr, getElements } from '../../services/getter';\nimport { validateAttr, validateText } from '../../services/validator';\nimport { onEvent } from '../../services/lifecycleManager';\n\nconst commaizeNumber = () => {\n  const customAttr = 'tc-format-number';\n  const attrValue = 'comma';\n\n  const elements = getElements(`[${customAttr}]`);\n\n  elements.forEach((elem: Element) => {\n    const attr = getElementAttr(elem, customAttr);\n\n    if (validateAttr(attr, attrValue)) {\n      const hasText = validateText(elem.textContent);\n      const number = parseInt(hasText, 10);\n\n      if (!Number.isNaN(number)) {\n        elem.textContent = number.toLocaleString('ko-KR');\n      }\n    }\n  });\n};\n\nonEvent('DOMContentLoaded', commaizeNumber);\n\nexport default commaizeNumber;\n"],"names":["PROMPT_MSG","validateText","text","Error","getElements","selector","elements","document","querySelectorAll","validateElements","lifecycleEvents","DOMContentLoaded","load","beforeunload","unload","eventFired","addEventListener","_a","forEach","callback","window","event","customAttr","elem","attr","element","getAttribute","getElementAttr","value","isValidAttr","validateAttr","hasText","textContent","number","parseInt","Number","isNaN","toLocaleString","push"],"mappings":"2FAAA,MAAMA,EACQ,WADRA,EAEQ,gBAFRA,EAGQ,qBC6BRC,EAAgBC,IACpB,IAAKA,EACH,MAAM,IAAIC,MAAMH,GAGlB,OAAOE,CAAI,ECnCPE,EAAeC,IACnB,MAAMC,EAAWC,SAASC,iBAAiBH,GAG3C,MDJuB,CACvBC,IAEA,IAAKA,EACH,MAAM,IAAIH,MAAMH,EAGH,ECLfS,CAAiBH,GAEVA,CAAQ,ECHXI,EAAmE,CACvEC,iBAAkB,GAClBC,KAAM,GACNC,aAAc,GACdC,OAAQ,IAIJC,EAAoD,CACxDJ,kBAAkB,EAClBC,MAAM,EACNC,cAAc,EACdC,QAAQ,GAcVP,SAASS,iBAAiB,oBAAoB,WAC5CD,EAAWJ,kBAAmB,EACE,QAAhCM,EAAAP,EAAgBC,wBAAgB,IAAAM,GAAAA,EAAEC,SAASC,GAAaA,KAAW,IAGrEC,OAAOJ,iBAAiB,QAAQ,WAC9BD,EAAWH,MAAO,EACE,QAApBK,EAAAP,EAAgBE,YAAI,IAAAK,GAAAA,EAAEC,SAASC,GAAaA,KAAW,IAGzDC,OAAOJ,iBAAiB,gBAAgB,WACtCD,EAAWF,cAAe,EACE,QAA5BI,EAAAP,EAAgBG,oBAAY,IAAAI,GAAAA,EAAEC,SAASC,GAAaA,KAAW,IAGjEC,OAAOJ,iBAAiB,UAAU,WAChCD,EAAWD,QAAS,EACE,QAAtBG,EAAAP,EAAgBI,cAAM,IAAAG,GAAAA,EAAEC,SAASC,GAAaA,KAAW,IA3B3C,IAACE,EAAuBF,IAAAA,ECfjB,KACrB,MAAMG,EAAa,mBAGFlB,EAAY,IAAIkB,MAExBJ,SAASK,IAChB,MAAMC,EFFa,EAACC,EAAkBH,KACxC,MAAME,EAAOC,EAAQC,aAAazB,EAAaqB,IAC/C,OAAOrB,EAAauB,EAAK,EEAVG,CAAeJ,EAAMD,GAElC,GHDiB,EAACE,EAAcI,KAClC,MAAMC,EAAcL,IAASI,EAE7B,IAAKC,EACH,MAAM,IAAI1B,MAAMH,GAGlB,OAAO6B,CAAW,EGNZC,CAAaN,EAPD,SAOmB,CACjC,MAAMO,EAAU9B,EAAasB,EAAKS,aAC5BC,EAASC,SAASH,EAAS,IAE5BI,OAAOC,MAAMH,KAChBV,EAAKS,YAAcC,EAAOI,eAAe,aAG7C,EDDEtB,EADWM,ECKT,oBDHJF,YAIFF,EAAAP,EAAgBW,mBAAQiB,KAAKnB"}