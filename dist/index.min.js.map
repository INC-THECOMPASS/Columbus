{"version":3,"file":"index.min.js","sources":["../src/core/constants.ts","../src/helpers/getter.ts","../src/helpers/validator.ts","../src/utils/format/commaizeNumber.ts"],"sourcesContent":["export const PROMPT_MSG = {\n  EMPTY_TEXT: '빈 값 입니다.',\n  EMPTY_ELEM: '선택된 요소가 없습니다.',\n};","import { validateElements } from './validator';\n\nexport const getElements = (selector: string): NodeListOf<Element> => {\n  const elements = document.querySelectorAll(selector);\n  validateElements(elements);\n\n  return elements\n};","import { PROMPT_MSG } from '../core/constants';\n\nexport const validateElements = (elements: NodeListOf<Element> | null): Element | NodeListOf<Element> => {\n  if (!elements) {\n    throw new Error(PROMPT_MSG.EMPTY_ELEM);\n  }\n\n  return elements;\n};\n\nexport const validateElementsAttr = (elements: NodeListOf<Element>, customAttr: string, value: string): boolean => {\n  return Array.from(elements).some((elem: Element) => {\n    const customAttrValue = elem.getAttribute(customAttr);\n    return customAttrValue === value;\n  });\n};\n\nexport const validateElementsText = (text: string | null): string => {\n  if (!text) {\n    throw new Error(PROMPT_MSG.EMPTY_TEXT);\n  }\n\n  return text;\n};","import { getElements } from '../../helpers/getter';\nimport { validateElementsAttr, validateElementsText } from '../../helpers/validator';\n\nexport const commaizeNumber = () => {\n  const elements = getElements('[tc-format-string]');\n  const hasAttr = validateElementsAttr(elements, 'tc-format-string', 'comma');\n\n  if (hasAttr) {\n    elements.forEach((elem: Element) => {\n      const hasText = validateElementsText(elem.textContent);\n\n      const number = parseInt(hasText, 10);\n      const formatter = new Intl.NumberFormat();\n\n      if (!Number.isNaN(number)) {\n        elem.textContent = formatter.format(number);\n      }\n    });\n  }\n};"],"names":["PROMPT_MSG","getElements","selector","elements","document","querySelectorAll","Error","validateElements","hasAttr","customAttr","value","Array","from","some","elem","getAttribute","validateElementsAttr","forEach","hasText","text","validateElementsText","textContent","number","parseInt","formatter","Intl","NumberFormat","Number","isNaN","format"],"mappings":"gPAAO,MAAMA,EACC,WADDA,EAEC,gBCADC,EAAeC,IAC1B,MAAMC,EAAWC,SAASC,iBAAiBH,GAG3C,MCJ8B,CAACC,IAC/B,IAAKA,EACH,MAAM,IAAIG,MAAMN,EAGH,EDHfO,CAAiBJ,GAEVA,CAAQ,mBEHa,KAC5B,MAAMA,EAAWF,EAAY,sBACvBO,EDK4B,EAACL,EAA+BM,EAAoBC,IAC/EC,MAAMC,KAAKT,GAAUU,MAAMC,GACRA,EAAKC,aAAaN,KACfC,ICRbM,CAAqBb,EAAU,mBAAoB,SAE/DK,GACFL,EAASc,SAASH,IAChB,MAAMI,EDQwB,CAACC,IACnC,IAAKA,EACH,MAAM,IAAIb,MAAMN,GAGlB,OAAOmB,CAAI,ECbSC,CAAqBN,EAAKO,aAEpCC,EAASC,SAASL,EAAS,IAC3BM,EAAY,IAAIC,KAAKC,aAEtBC,OAAOC,MAAMN,KAChBR,EAAKO,YAAcG,EAAUK,OAAOP"}